% Generated by roxygen2 (4.0.2): do not edit by hand
\name{CNB}
\alias{CNB}
\title{CNB}
\usage{
CNB(X, T, C, SURVTIME, X.test = NULL, scaleX = TRUE, type = "PC")
}
\arguments{
\item{X}{Matrix of predictors for training the model.}

\item{T}{Vector of observation times.}

\item{C}{Vector of event indicators (1 = event, 0 = censored).}

\item{SURVTIME}{Time horizon (on the same scale as the observation times in \code{T}) over which predictions of the survival probability are desired.
For instance, if \code{SURVTIME} equals \eqn{t} and \code{X.test} equals \eqn{X}, then the function estimates \eqn{P(T \geq t | X)}.}

\item{X.test}{Matrix of predictors for which to obtain predictions.}

\item{scaleX}{Logical indicating whether or not to standardize \code{X} and \code{X.test} so that each column has zero mean and unit variance. Default is \code{TRUE}.}

\item{type}{Version of CNB to use. The default, \code{type="PC"}, implements Censored Naive Bayes after applying a principal components decomposition to the predictor matrix. \code{type="orig"} uses the original predictor matrix.}
}
\value{
A vector of predicted survival probabilities, with one entry corresponding to each row of \code{X.test}.
}
\description{
Censored Naive Bayes
}
\details{
This function implements two versions of the Censored Naive Bayes technique as described in the technical report available at http://z.umn.edu/julianw-cnb
}
\examples{
library(survival)
X <- flchain[,c("age","kappa","lambda")]
frac.train <- 0.7
ind.train <- sample.int(nrow(flchain),nrow(flchain)*0.7)
ind.test <- setdiff(1:nrow(flchain),ind.train)
X.train <- X[ind.train,]
X.test <- X[ind.test,]
T.train <- as.vector(flchain[ind.train,"futime"])
C.train <- as.vector(flchain[ind.train,"death"])
T.test <- as.vector(flchain[ind.test,"futime"])
C.test <- as.vector(flchain[ind.test,"death"])
SURVTIME <- 5000

survpreds.cnb <- CNB(X.train,T.train,C.train,5000,X.test=X.test)
eventpreds.cnb <- 1 - survpreds.cnb

cutpts <- c(0,0.1,0.2,0.3,1)
calib.table(list(eventpreds.cnb),T.test,C.test,cutpts,SURVTIME)

surv <- Surv(T.test,C.test)
survConcordance(surv ~ eventpreds.cnb)
## Compare concordance to a Cox Model
survConcordance(surv ~ predict(coxph(Surv(T.train,C.train)~age+kappa+lambda,data=X.train),X.test))
}

